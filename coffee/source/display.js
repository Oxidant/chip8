// Generated by CoffeeScript 1.6.2
(function() {
  this.Display = (function() {
    function Display() {}

    Display.prototype.container = null;

    Display.prototype.canvas = null;

    Display.prototype.context = null;

    Display.prototype.shadow = null;

    Display.prototype.config = {
      width: 256,
      height: 128,
      orig_w: 64,
      orig_h: 32
    };

    Display.prototype._initialized = false;

    Display.prototype.data = Array(Display.prototype.config.orig_w * Display.prototype.config.orig_w);

    Display.prototype.init = function() {
      if (!this._initialized) {
        this.container = document.createElement('div');
        document.body.appendChild(this.container);
        this.canvas = document.createElement('canvas');
        this.canvas.width = this.config['orig_w'];
        this.canvas.height = this.config['orig_h'];
        this.canvas.style.width = this.config['width'] + 'px';
        this.canvas.style.height = this.config['height'] + 'px';
        this.container.appendChild(this.canvas);
        this.context = this.canvas.getContext('2d');
        this.fill();
        return this._initialized = true;
      }
    };

    Display.prototype.clear = function() {
      var i, _i, _ref;

      for (i = _i = 0, _ref = this.data.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.data[i] = 0;
      }
      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
      return this.fill();
    };

    Display.prototype.fill = function(color, x, y, width, height) {
      if (color == null) {
        color = "black";
      }
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      if (width == null) {
        width = this.canvas.width;
      }
      if (height == null) {
        height = this.canvas.height;
      }
      this.context.fillStyle = color;
      return this.context.fillRect(x, y, width, height);
    };

    Display.prototype.draw = function() {
      var i, _i, _ref, _results;

      _results = [];
      for (i = _i = 0, _ref = this.data.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.data[i] = 0);
      }
      return _results;
    };

    Display.prototype.setPixel = function(x, y) {
      var result;

      x = x > this.config['orig_w'] ? x - this.config['orig_w'] : x < 0 ? this.config['orig_w'] + x : x;
      y = y > this.config['orig_h'] ? y - this.config['orig_h'] : y < 0 ? this.config['orig_h'] + y : y;
      result = 1 ^ this.getPixel(x, y);
      if (result) {
        this.fill("red", x, y, 1, 1);
      } else {
        this.fill("black", x, y, 1, 1);
      }
      return !result;
    };

    Display.prototype.getPixel = function(x, y) {
      var pixel;

      pixel = this.context.getImageData(x, y, 1, 1);
      return !!pixel.data[0];
    };

    Display.prototype.getCoords = function(x, y) {};

    return Display;

  })();

}).call(this);
